// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kibana.proto

/*
Package kibana is a generated protocol buffer package.

It is generated from these files:
	kibana.proto

It has these top-level messages:
	WriteRequest
	WriteResponse
*/
package kibana

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteRequest struct {
	Tag   string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Info  string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Level string `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WriteRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *WriteRequest) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *WriteRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type WriteResponse struct {
	Code    int32             `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    map[string]string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WriteResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WriteResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *WriteResponse) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*WriteRequest)(nil), "WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "WriteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Kibana service

type KibanaClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
}

type kibanaClient struct {
	cc *grpc.ClientConn
}

func NewKibanaClient(cc *grpc.ClientConn) KibanaClient {
	return &kibanaClient{cc}
}

func (c *kibanaClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/Kibana/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Kibana service

type KibanaServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
}

func RegisterKibanaServer(s *grpc.Server, srv KibanaServer) {
	s.RegisterService(&_Kibana_serviceDesc, srv)
}

func _Kibana_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KibanaServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kibana/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KibanaServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kibana_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Kibana",
	HandlerType: (*KibanaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Kibana_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kibana.proto",
}

func init() { proto.RegisterFile("kibana.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x25, 0x75, 0x53, 0xd4, 0xa3, 0x45, 0xe8, 0xc4, 0x60, 0x75, 0xaa, 0x32, 0x65, 0x40, 0x1e,
	0xc2, 0x00, 0x62, 0x86, 0x05, 0x36, 0x2f, 0xcc, 0x57, 0x7a, 0x54, 0x51, 0x82, 0x5d, 0x62, 0xb7,
	0x52, 0xfe, 0x87, 0x0f, 0x45, 0xbe, 0x36, 0x88, 0x6c, 0xef, 0x3d, 0xdd, 0xbd, 0xf7, 0xf4, 0x60,
	0xd1, 0xd4, 0x1b, 0x72, 0x64, 0xf6, 0x9d, 0x8f, 0xbe, 0x78, 0x85, 0xc5, 0x7b, 0x57, 0x47, 0xb6,
	0xfc, 0x7d, 0xe0, 0x10, 0xf1, 0x06, 0x54, 0xa4, 0x9d, 0xce, 0xd6, 0x59, 0x39, 0xb7, 0x09, 0x22,
	0xc2, 0xb4, 0x76, 0x9f, 0x5e, 0x4f, 0x44, 0x12, 0x8c, 0xb7, 0x90, 0xb7, 0x7c, 0xe4, 0x56, 0x2b,
	0x11, 0x4f, 0xa4, 0xf8, 0xc9, 0x60, 0x79, 0x36, 0x0b, 0x7b, 0xef, 0x02, 0xa7, 0xdf, 0x0f, 0xbf,
	0x65, 0xb1, 0xcb, 0xad, 0x60, 0xd4, 0x70, 0xf9, 0xc5, 0x21, 0xd0, 0x8e, 0xcf, 0x96, 0x03, 0xc5,
	0x3b, 0x98, 0x6e, 0x29, 0x92, 0x56, 0x6b, 0x55, 0x5e, 0x55, 0xda, 0x8c, 0xbc, 0xcc, 0x33, 0x45,
	0x7a, 0x71, 0xb1, 0xeb, 0xad, 0x5c, 0xad, 0x1e, 0x60, 0xfe, 0x27, 0xa5, 0xda, 0x0d, 0xf7, 0x43,
	0xed, 0x86, 0xfb, 0x54, 0xf1, 0x48, 0xed, 0x61, 0x08, 0x39, 0x91, 0xa7, 0xc9, 0x63, 0x56, 0x55,
	0x30, 0x7b, 0x93, 0x09, 0xb0, 0x84, 0x5c, 0x32, 0x70, 0x69, 0xfe, 0x8f, 0xb0, 0xba, 0x1e, 0x47,
	0x17, 0x17, 0x9b, 0x99, 0xac, 0x75, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x40, 0x99, 0x67,
	0x3d, 0x01, 0x00, 0x00,
}
